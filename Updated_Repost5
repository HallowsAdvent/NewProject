if _G.Celebrial_nonYieldLoaded ~= true then
	_G.Celebrial_nonYieldLoaded = true
	
	local ACTIVE_MODIFIES = {}
	game.CoreGui:SetAttribute("Celebrial_Destroying", false)
	
	
	local ScriptDB = {

		ScriptBuild =				"Alpha v0.51",
		ScriptType =				"Legit",

		ScriptName =				"Celebrials",
		ScriptSupport =				"Criminality",

		Membership_Info =			_G.Memberships_logger,
	}

	local A = 'https://raw.githubusercontent.com/HallowsAdvent/NewProject/refs/heads/main/Source2'
	local B = {}

	B.Plugins = {}
	B.Scripts = {}
	B.Assets =  {}

	B.Plugins.__Commas = function(data) local vdata = data local gdata while game do vdata, gdata = string.gsub(vdata, '^(-?%d+)(%d%d%d)', '%1,%2') if (gdata == 0) then break end end return vdata end

	local C = {

		Build_Core1 = ScriptDB.ScriptName.."."..ScriptDB.ScriptSupport.." | "..ScriptDB.ScriptBuild,
		Build_Core2 = "Subscribe-days left: "..tostring(B.Plugins.__Commas(ScriptDB.Membership_Info.Days)),
	}

	local Init = function(DataCore)
		_G.DataCore = DataCore
	end

	if type(A) == "string" and string.find(string.lower(A), "githubusercontent") then Init(C) A = loadstring(game:HttpGet(A, true))() end

	--  //  0  \\  --
	--local Sections = B.Assets.Sections
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local PlayerService = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local Player = PlayerService.LocalPlayer

	local camera = workspace.CurrentCamera
	local mousee = Player:GetMouse()

	local M = {}
	
	M.Functions = {}
	M.Library = {}
	M.Local = {}
	
	B.Assets.Windows = {

		Combat = 		A:AddWindow('Combat'),
		Visual = 		A:AddWindow('Palpability'),
		Misc =   		A:AddWindow('Miscellaneous'),
		Membership =    A:AddWindow('Membership'),
		WaterM = 		A:AddWatermark('')
	}
	local wd = B.Assets.Windows

	B.Assets.Sections = {

		Combat = {
			Aim = wd.Combat:AddSection('Aim-locking')	
		},
		Visual = {
			Sense = wd.Visual:AddSection('Palpability'),
			Sense2 = wd.Visual:AddSection('Other'),
		},
		Misc = {
			Character = wd.Misc:AddSection('Character Modifier'),
			Movement = wd.Misc:AddSection('Movement Modifier'),
		},
		Membership = {
			Information = wd.Membership:AddSection('â™¥')
		},

	}
	
	M.Library.Sections = B.Assets.Sections
	
	local Script = coroutine.create(function()
		M.Services = {
			ReplicatedFirst = 				game:GetService("ReplicatedFirst"),
			ReplicatedStorage = 			game:GetService("ReplicatedStorage"),

			StarterGui = 					game:GetService("StarterGui"),
			StarterPack = 					game:GetService("StarterPack"),
			StarterPlayer = 				game:GetService("StarterPlayer"),

			Players = 						game:GetService("Players"),
			Lighting = 						game:GetService("Lighting"),
			Workspace = 					game:GetService("Workspace"),

			RunService = 					game:GetService("RunService"),
			TweenService = 					game:GetService("TweenService"),
		}

		M.Local.Camera = M.Services.Workspace.CurrentCamera
		M.Local.Player = M.Services.Players.LocalPlayer
		M.Local.Mouse = M.Local.Player:GetMouse()


		M.Functions.CreateInstance = function(instance, PropertyBase, Parent)
			local connected_instance = Instance.new(instance)
			for PropertyName, PropertyValue in PropertyBase do
				if PropertyName ~= "Parent" then
					connected_instance[PropertyName] = PropertyValue
				end
			end 

			if Parent then connected_instance.Parent = Parent end
			return connected_instance
		end

		M.Functions.FindInstance = function(PropertyTable, ParentFolder, IsMulti)
			local PossibleFinds = {}
			local PossibleFind = nil

			if ParentFolder then
				for _, V in ParentFolder do
					if string.lower(V.ClassName) == string.lower(PropertyTable.Class) and string.lower(V.Name) == string.lower(PropertyTable.Name) then
						if IsMulti then
							table.insert(PossibleFinds, V)
						else
							PossibleFind = V
						end
					end
				end
			end
		end

		M.Functions.GetOwnCharacter = function()
			return M.Local.Player.Character
		end

		M.Functions.GetCharacter = function(Player)
			if Player ~= M.Local.Player then
				return Player.Character
			else
				return M.Functions.GetOwnCharacter()
			end
		end

		B.Values =  {

			Aimlock = {
				TargetPart = "Head",
				TargetSense = 0.5,
				AimlockBool = true,
				DistanceValue = 250,
				DownedCheck = true,
				DeadCheck = true,
			},

			Walkspeed = {
				SpeedValue = 1,
				SpeedBool = true,
			},

			Acceleration = {
				AccelValue = 1,
				AccelBool = true,
			},

			StaminaMods = {
				StaminaBool = true,
			},

			Wallhacking = {
				Players = {
					Enabled = true,
					Color = Color3.fromRGB(255, 255, 255)
				},

				Crates = {
					White_Enabled = true,
					Green_Enabled = true,
					Red_Enabled = true,
					Gold_Enabled = true,

					ColorWhite = Color3.fromRGB(189, 189, 189),
					ColorGreen = Color3.fromRGB(128, 255, 126),
					ColorRed = Color3.fromRGB(255, 74, 74),
					ColorGold = Color3.fromRGB(229, 191, 41)
				},

				Dealers = {
					Enabled = true,
					Color = Color3.fromRGB(58, 137, 255),
				},

				ATMs = {
					Enabled = true,
					Color = Color3.fromRGB(80, 255, 191),
				},

				Safes = {
					Enabled = true,
					Registers = true,
					Color = Color3.fromRGB(255, 190, 134),
				},
			},

			Lockpicking = {
				LockpickBool = true,
			},

			FastUsage = {
				PromptsBool = true,
			},

			CameraHack = {
				FreecamBool = true,
				MoreZoomBool = true,
				InvisCameraBool = true,
			},

			Flinging = {
				FlingBool = true,
			},
		}

		local AimlockTable = {
			Radius = 200,
			Color = Color3.fromRGB(60, 255, 0),
			NumSides = 64,
			Filled = false,
			Visible = true,
			Thickness = 1,
			Transparency = 0,
			Position = Vector2.new(M.Local.Camera.ViewportSize.X / 2, M.Local.Camera.ViewportSize.Y / 2)
		}

		local I_aimlock = Drawing.new("Circle")
		for PropertyName, PropertyValue in AimlockTable do
			I_aimlock[PropertyName] = PropertyValue
		end


		local I_esp = {
			BillSize = UDim2.new(1000,0,1000,0),
			FrameSize = UDim2.new(0.005,0,0.005,0),
			FramePos = UDim2.new(0.5,0,0.5,0),
			FramePoint = Vector2.new(0.5,0.5),
			FrameColor = Color3.fromRGB(255,255,255),
			Gm = game.Workspace.Terrain,
			Gm1 = "espcnc"
		}

		local M_esp = M.Functions.CreateInstance("Folder", {Name = "tempest attachments"}, game.Workspace.Terrain)
		local F_esp = {

			Players = M.Functions.CreateInstance("Folder", {Name = "PlayerEsp"}, M_esp),
			Scraps = M.Functions.CreateInstance("Folder", {Name = "ScrapEsp"}, M_esp),
			Dealers = M.Functions.CreateInstance("Folder", {Name = "DealerEsp"}, M_esp),
			ATMs = M.Functions.CreateInstance("Folder", {Name = "ATMsEsp"}, M_esp),
			Safes = M.Functions.CreateInstance("Folder", {Name = "SafeEsp"}, M_esp),
		}

		local Scrap_esp = {
			Golds = M.Functions.CreateInstance("Folder", {Name = "Golds"}, F_esp.Scraps),
			Reds = M.Functions.CreateInstance("Folder", {Name = "Reds"}, F_esp.Scraps),
			Greens = M.Functions.CreateInstance("Folder", {Name = "Greens"}, F_esp.Scraps),
			Whites = M.Functions.CreateInstance("Folder", {Name = "Whites"}, F_esp.Scraps),
		}


		B.Scripts.CreatePossibleEsp = function(Object, BasedProperties) task.wait()
			local EDBT = {}

			EDBT.NiceFolder = M_esp
			EDBT.Parent = BasedProperties.Parent

			EDBT.Objects = {}

			EDBT.ScreenBoard = M.Functions.CreateInstance("BillboardGui", {
				Name = "N1",
				Enabled = true,
				Adornee = Object,
				LightInfluence = 0,
				AlwaysOnTop = true,
				Size = BasedProperties.GuiSize or I_esp.BillSize,
				ResetOnSpawn = false,
			}, BasedProperties.Parent)

			EDBT.VectorFrame = M.Functions.CreateInstance("Frame", {
				Name = "N2",
				Position = I_esp.FramePos,
				Size = I_esp.FrameSize,
				BackgroundTransparency = 1,
				AnchorPoint = I_esp.FramePoint
			}, EDBT.ScreenBoard)

			EDBT.VectorStroke = M.Functions.CreateInstance("UIStroke", {
				Name = "N3",
				Thickness = 2,
				Color = BasedProperties.Color or I_esp.FrameColor,
				LineJoinMode = Enum.LineJoinMode.Miter
			}, EDBT.VectorFrame)

			EDBT.VectorTLabel = M.Functions.CreateInstance("TextLabel", {
				Name = "N4",
				Text = BasedProperties.Text or "",
				TextSize = 14,
				TextWrapped = true,
				TextColor3 = BasedProperties.Color or I_esp.FrameColor,
				TextStrokeTransparency = 0,
				BackgroundTransparency = 1,
				Font = "MontserratBold",
				Position = UDim2.new(0.5,0,0.503,0),
				Size = UDim2.new(0,500,0,50),
				AnchorPoint = I_esp.FramePoint
			}, EDBT.ScreenBoard)
		end

		B.Scripts.Toggle_InfinityStamina = function(Boolean)
			local NewFolder = ReplicatedStorage["CharStats"]:FindFirstChild(Player.Name) or nil

			if NewFolder then
				if Boolean then
					local meanline = NewFolder.Currents:FindFirstChild("2.39418")

					if not meanline then
						local instance_boolean = Instance.new("BoolValue")
						instance_boolean.Value = true
						instance_boolean.Name = "2.39418"
						instance_boolean.Parent = NewFolder.Currents
					end
				else
					if NewFolder.Currents:FindFirstChild("2.39418") then
						NewFolder.Currents["2.39418"]:Destroy()
					end
				end
			end
		end

		B.Scripts.Change_WalkSpeed = function(Boolean, Number)
			local NewFolder = ReplicatedStorage["CharStats"]:FindFirstChild(Player.Name) or nil
			Number = Number or 0

			if NewFolder then
				if Boolean then
					local meanline

					if NewFolder.Currents:FindFirstChild("SP_ADONIS") then
						meanline = NewFolder.Currents
						meanline.Value = Number
					else
						meanline = Instance.new("NumberValue")
						meanline.Name = "SP_ADONIS"
						meanline.Value = Number
						meanline.Parent = NewFolder.Currents
					end	
				else
					local meanline

					if NewFolder.Currents:FindFirstChild("SP_ADONIS") then
						meanline = NewFolder.Currents.SP_ADONIS
						meanline:Destroy()
					end
				end
			end
		end

		B.Scripts.Change_Acceleration = function(Number)
			local NewFolder = ReplicatedStorage["CharStats"]:FindFirstChild(Player.Name) or nil
			Number = Number or 1

			if NewFolder then
				local meanline = NewFolder:FindFirstChild("AccelerationModifier")
				if meanline then
					meanline.Value = Number
				end
			end
		end

		B.Scripts.Toggle_NeckMovement = function(Boolean)
			if Player.Character then
				Player.Character:SetAttribute("NoNeckMovement", Boolean)
			end
		end

		B.Scripts.Toggle_BodyRotation = function(Boolean)
			local NewFolder = ReplicatedStorage["CharStats"]:FindFirstChild(Player.Name) or nil

			if NewFolder then
				if Boolean then
					local meanline = NewFolder.Currents:FindFirstChild("ROTROOT")

					if not meanline then
						local instance_boolean = Instance.new("BoolValue")
						instance_boolean.Name = "ROTROOT"
						instance_boolean.Parent = NewFolder.Currents
					end
				else
					if NewFolder.Currents:FindFirstChild("ROTROOT") then
						NewFolder.Currents["ROTROOT"]:Destroy()
					end
				end
			end
		end

		B.Scripts.Give_TeleportTool = function()
			local TeleportHandle = M.Functions.CreateInstance("Tool", {
				Name = "CLICK-TP",
				RequiresHandle = false,
			}, M.Local.Player.Backpack)

			TeleportHandle.Activated:Connect(function(DBT)
				DBT = {
					Character = M.Functions.GetOwnCharacter(),
					Mouse = M.Local.Mouse,
					HRP = M.Functions.GetOwnCharacter():FindFirstChild("HumanoidRootPart")
				}

				if not DBT.Character or not DBT.HRP then return end
				DBT.CFrame = CFrame.new(DBT.Mouse.Hit.X, DBT.Mouse.Hit.Y + 3, DBT.Mouse.Hit.Z, select(4, DBT.HRP.CFrame:components()))
			end)
		end

		B.Scripts.Toggle_Fling = function(Boolean)
			if Boolean then
				coroutine.wrap(function()
					repeat RunService.Heartbeat:Wait()
						local character = Player.Character
						local root = character:WaitForChild("HumanoidRootPart")
						local vel, movel = nil, 0.1

						while not (character and character.Parent and root and root.Parent) do
							RunService.Heartbeat:Wait()
							character = Player.Character
							root = character:WaitForChild("HumanoidRootPart")
						end

						vel = root.Velocity
						root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)

						RunService.RenderStepped:Wait()
						if character and character.Parent and root and root.Parent then
							root.Velocity = vel
						end

						RunService.Stepped:Wait()
						if character and character.Parent and root and root.Parent then
							root.Velocity = vel + Vector3.new(0, movel, 0)
							movel = movel * -1
						end
					until B.Values.Flinging.FlingBool ~= true
				end)()
			end
		end

		B.Scripts.Toggle_ExtraSensoryPerceptionPlayers = function(Boolean)
			if Boolean then
				for _, Player in M.Services.Players:GetPlayers() do
					if Player ~= M.Local.Player then
						if Player.Character then
							if Player.Character:FindFirstChild("HumanoidRootPart") then
								local Apart = Player.Character:FindFirstChild("HumanoidRootPart")
								B.Scripts.CreatePossibleEsp(Apart, {Text = Player.Name, Color = B.Values.Wallhacking.Players.Color, Parent = F_esp.Players})
							end
						end
					end
				end
			else
				F_esp.Players:ClearAllChildren()
			end
		end

		B.Scripts.Toggle_ExtraSensoryPerceptionObjects = function(Boolean, Folder, CustomDBT)
			if Boolean then
				if Folder then
					for _, Object in Folder:GetChildren() do
						if string.find(string.lower(CustomDBT.Text), "crate") or string.find(string.lower(CustomDBT.Text), "scrap") then
							local color_ = B.Values.Wallhacking.Crates.ColorWhite

							local CurrentRare = Object:GetAttribute("LPBRs")

							if Object:GetAttribute("LPBRs") == 2 then
								color_ = B.Values.Wallhacking.Crates.ColorRed
							elseif Object:GetAttribute("LPBrs") == 1 then
								color_ = B.Values.Wallhacking.Crates.ColorGreen
							end

							local LoadA = function(ParentProgress)
								B.Scripts.CreatePossibleEsp(Object, {Text = CustomDBT.Text, Color = color_, Parent = ParentProgress, GuiSize = UDim2.new(0.004,0,0.002,0)})
							end

							if CurrentRare == 1 and string.find(string.lower(CustomDBT.Text), "green") then
								LoadA(Scrap_esp.Greens)
							elseif CurrentRare == 2 and string.find(string.lower(CustomDBT.Text), "red") then
								LoadA(Scrap_esp.Reds)
							elseif CurrentRare == nil and string.find(string.lower(CustomDBT.Text), "white") and (Object.Name == "S1" or Object.Name == "S2") then
								LoadA(Scrap_esp.Whites)
							end

						elseif CustomDBT.Text == "Safe" then
							if B.Values.Wallhacking.Safes.Registers then
								if string.find(string.lower(Object.Name), "register") then
									B.Scripts.CreatePossibleEsp(Object, {Text = "Register", Color = B.Values.Wallhacking[CustomDBT.Name].Color, Parent = CustomDBT.Folder})
								else
									B.Scripts.CreatePossibleEsp(Object, {Text = "Safe", Color = B.Values.Wallhacking[CustomDBT.Name].Color, Parent = CustomDBT.Folder})
								end
							else
								B.Scripts.CreatePossibleEsp(Object, {Text = CustomDBT.Text, Color = B.Values.Wallhacking[CustomDBT.Name].Color, Parent = CustomDBT.Folder})
							end
						else
							B.Scripts.CreatePossibleEsp(Object, {Text = CustomDBT.Text, Color = B.Values.Wallhacking[CustomDBT.Name].Color, Parent = CustomDBT.Folder})
						end
					end
				end
			else
				if CustomDBT.DeleteFolder then
					CustomDBT.DeleteFolder:ClearAllChildren()
				else
					CustomDBT.Folder:ClearAllChildren()
				end
			end
		end

		B.Scripts.Toggle_CameraProperties = function(Boolean, Property)
			local CameraDistance = function()
				if Boolean then Player.CameraMaxZoomDistance = 1000 else Player.CameraMaxZoomDistance = 10 end
			end

			local CameraMode = function()
				if Boolean then Player.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam 
				else Player.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom end
			end

			if string.lower(Property) == "distance" then
				CameraDistance()
			elseif string.lower(Property) == "mode" then
				CameraMode()
			end
		end

		B.Scripts.Toggle_LockpickResize = function(Boolean)
			local PlayerGui = M.Local.Player.PlayerGui

			local Baty = function(gui)
				if gui:FindFirstChild("MF") then
					for _, T in gui.MF.LP_Frame.Frames:GetChildren() do
						if T:IsA("Frame") and T:FindFirstChild("Bar") then
							if Boolean then
								T.Bar.UIScale.Scale = 15
							else
								T.Bar.UIScale.Scale = 1
							end
						end
					end
				end
			end

			if PlayerGui:FindFirstChild("LockpickGUI") then
				Baty(PlayerGui.LockpickGUI)
			end
		end

		task.spawn(function() -- Handling Specific Events / Connections
			local PlayerGui = Player.PlayerGui

			PlayerGui.ChildAdded:Connect(function(AddedChild)
				if AddedChild.Name == "LockpickGUI" then
					if B.Values.Lockpicking.LockpickBool == true then
						B.Scripts.Toggle_LockpickResize(true)
					else
						B.Scripts.Toggle_LockpickResize(false)
					end
				end
			end)

			game:GetService("ProximityPromptService").PromptShown:Connect(function(ActualPrompt)
				if B.Values.FastUsage.PromptsBool == true then
					if ActualPrompt:GetAttribute("flag_duration") == nil then
						ActualPrompt:SetAttribute("flag_duration", ActualPrompt.HoldDuration)
					end
					ActualPrompt.HoldDuration = 0
				elseif ActualPrompt:GetAttribute("flag_duration") ~= nil then
					if ActualPrompt:GetAttribute("flag_duration") ~= ActualPrompt.HoldDuration then
						ActualPrompt.HoldDuration = ActualPrompt:GetAttribute("flag_duration")
					end
				end
			end)

			coroutine.wrap(function()
				while true do task.wait(7.5)
					if B.Values.Wallhacking.Players.Enabled == true then
						B.Scripts.Toggle_ExtraSensoryPerceptionPlayers(false)
						task.wait(.05)
						B.Scripts.Toggle_ExtraSensoryPerceptionPlayers(true)
					end
				end
			end)()

			Player.CharacterAdded:Connect(function()
				task.wait(.8)

				if B.Values.Walkspeed.SpeedBool == true then
					B.Scripts.Change_WalkSpeed(true, B.Values.Walkspeed.SpeedValue)
					
				end
				if B.Values.Acceleration.AccelBool == true then
					ACTIVE_MODIFIES["Acceleration_Value"] = ReplicatedStorage.CharStats[Player.Name].AccelerationModifier.Value
					task.wait()
					B.Scripts.Change_Acceleration(B.Values.Acceleration.AccelValue)
				end
				if B.Values.StaminaMods.StaminaBool == true then
					B.Scripts.Toggle_InfinityStamina(true)
				end

			end)
		end)

		
		
		
		local AU
		if ScriptDB.Membership_Info.Account ~= nil then
			AU = game:GetService("UserService"):GetUserInfosByUserIdsAsync({ScriptDB.Membership_Info.Account})[1].Username
		else
			AU = "unobstructed"
		end

		M.Library.Sections.Membership.Information:AddLabel(' Version: '..ScriptDB.Membership_Info.Build)
		M.Library.Sections.Membership.Information:AddLabel(' Account: '..AU)
		M.Library.Sections.Membership.Information:AddLabel(' License: '..tostring(B.Plugins.__Commas(ScriptDB.Membership_Info.Days)).." days")
		M.Library.Sections.Membership.Information:AddButton('Log Out', function() 
			task.wait(.085)
			_G.IsScreenGui_toggler_actor:Destroy()
			
			task.wait(.3)
			
			B.Scripts.Change_WalkSpeed(false)
			B.Scripts.Change_Acceleration(1)
			B.Scripts.Toggle_InfinityStamina(false)
			B.Scripts.Toggle_CameraProperties(false, "distance")
			B.Scripts.Toggle_CameraProperties(false, "mode")
			B.Scripts.Toggle_Fling(false)
			B.Scripts.Toggle_NeckMovement(true)
			B.Scripts.Toggle_BodyRotation(false)
			B.Scripts.Toggle_LockpickResize(false)
			
			B.Values.Wallhacking.Players.Enabled = false
			
			B.Values.Wallhacking.Crates.Red_Enabled = false
			B.Values.Wallhacking.Crates.Green_Enabled = false
			B.Values.Wallhacking.Crates.White_Enabled = false
			B.Values.Wallhacking.Crates.Gold_Enabled = false
			
			B.Values.Wallhacking.Safes.Enabled = false
			B.Values.Wallhacking.Dealers.Enabled = false
			B.Values.Wallhacking.ATMs.Enabled = false
			
			B.Values.Aimlock.AimlockBool = false
			
			I_aimlock:Destroy()
			M_esp:Destroy()
			
			task.wait(.5)
			
			_G.Celebrial_nonYieldLoaded = false
			_G.Id_Verify_Celebrial_WithoutYielding = false

			task.wait(2)

			loadstring(game:HttpGet('https://raw.githubusercontent.com/HallowsAdvent/Main/refs/heads/main/Source1'))()
		end)
		
		
		
		

		--  \\  Speed  //  --
		M.Library.Sections.Misc.Movement:AddLabel('Speed-Hacking')

		M.Library.Sections.Misc.Movement:AddToggle('Toggle Speed', B.Values.Walkspeed.SpeedBool, Enum.KeyCode.Z, function(Boolean)
			B.Values.Walkspeed.SpeedBool = Boolean
			B.Scripts.Change_WalkSpeed(B.Values.Walkspeed.SpeedBool, B.Values.Walkspeed.SpeedValue)
		end)

		M.Library.Sections.Misc.Movement:AddSlider('Change Speed', 10, 0, 1, function(Number)
			B.Values.Walkspeed.SpeedValue = Number
			if B.Values.Walkspeed.SpeedBool == true then
				B.Scripts.Change_WalkSpeed(B.Values.Walkspeed.SpeedBool, B.Values.Walkspeed.SpeedValue)
			end
		end)




		--  \\  Acceleration  //  --
		M.Library.Sections.Misc.Movement:AddLabel('Acceleration-Hacking')

		M.Library.Sections.Misc.Movement:AddSlider('Change Acceleration', 10, 0, 1, function(Number)
			B.Values.Acceleration.AccelValue = Number
			B.Scripts.Change_Acceleration(B.Values.Acceleration.AccelValue)
		end)




		--  \\  Stamina  //  --
		M.Library.Sections.Misc.Character:AddLabel('Other')	

		M.Library.Sections.Misc.Character:AddToggle('Toggle Inf-Stamina', B.Values.StaminaMods.StaminaBool, Enum.KeyCode.I, function(Boolean)
			B.Values.StaminaMods.StaminaBool = Boolean
			B.Scripts.Toggle_InfinityStamina(B.Values.StaminaMods.StaminaBool)
		end)

		M.Library.Sections.Misc.Character:AddToggle('Toggle Fast-Prompts', B.Values.FastUsage.PromptsBool, nil, function(Boolean)
			B.Values.FastUsage.PromptsBool = Boolean
		end)

		M.Library.Sections.Misc.Character:AddToggle('Toggle Max-Camera-Distance', B.Values.CameraHack.MoreZoomBool, nil, function(Boolean)
			B.Values.CameraHack.MoreZoomBool = Boolean
			B.Scripts.Toggle_CameraProperties(Boolean, "distance")
		end)

		M.Library.Sections.Misc.Character:AddToggle('Toggle Camera-Occlusion', B.Values.CameraHack.InvisCameraBool, nil, function(Boolean)
			B.Values.CameraHack.InvisCameraBool = Boolean
			B.Scripts.Toggle_CameraProperties(Boolean, "mode")
		end)

		M.Library.Sections.Misc.Character:AddToggle('Toggle Fling', B.Values.Flinging.FlingBool, Enum.KeyCode.PageUp, function(Boolean)
			B.Values.Flinging.FlingBool = Boolean
			B.Scripts.Toggle_Fling(Boolean)
		end)




		--  \\  Other  //  --


		M.Library.Sections.Misc.Character:AddToggle('Disable Neck-Movement', true, nil, function(Boolean)
			B.Scripts.Toggle_NeckMovement(Boolean)
		end)

		M.Library.Sections.Misc.Character:AddToggle('Enable Root-Following', true, nil, function(Boolean)
			B.Scripts.Toggle_BodyRotation(Boolean)
		end)




		--  \\  Lockpicking  //  --
		M.Library.Sections.Misc.Character:AddToggle('Easy lockpicks', B.Values.Lockpicking.LockpickBool, nil, function(Boolean)
			B.Values.Lockpicking.LockpickBool = Boolean
			B.Scripts.Toggle_LockpickResize(Boolean)
		end)

		M.Library.Sections.Misc.Character:AddButton('Get Teleport-Tool', function() 
			B.Scripts.Give_TeleportTool()
		end)




		--  \\  Esp  //  --


		--Players
		M.Library.Sections.Visual.Sense:AddLabel('Players')

		M.Library.Sections.Visual.Sense:AddToggle('Toggle Player-Esp', B.Values.Wallhacking.Players.Enabled, Enum.KeyCode.K, function(Boolean)
			B.Values.Wallhacking.Players.Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionPlayers(Boolean)
		end)

		M.Library.Sections.Visual.Sense:AddColorPallete('Esp Color', B.Values.Wallhacking.Players.Color,function(a) 
			B.Values.Wallhacking.Players.Color = a
		end)


		--Crates
		M.Library.Sections.Visual.Sense:AddLabel('\nCrates')


		--Reds
		M.Library.Sections.Visual.Sense:AddToggle('Toggle Red Crate-Esp', B.Values.Wallhacking.Crates.Red_Enabled, nil, function(Boolean)
			B.Values.Wallhacking.Crates.Red_Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Filter.SpawnedPiles, {Folder = F_esp.Scraps, Text = "Red Crate", DeleteFolder = Scrap_esp.Reds})
		end)

		M.Library.Sections.Visual.Sense:AddColorPallete('Esp Color', B.Values.Wallhacking.Crates.ColorRed,function(a) 
			B.Values.Wallhacking.Crates.ColorRed = a
		end)


		--Greens
		M.Library.Sections.Visual.Sense:AddToggle('Toggle Green Crate-Esp', B.Values.Wallhacking.Crates.Green_Enabled, nil, function(Boolean)
			B.Values.Wallhacking.Crates.Green_Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Filter.SpawnedPiles, {Folder = F_esp.Scraps, Text = "Green Crate", DeleteFolder = Scrap_esp.Greens})
		end)
		M.Library.Sections.Visual.Sense:AddColorPallete('Esp Color', B.Values.Wallhacking.Crates.ColorGreen,function(a) 
			B.Values.Wallhacking.Crates.ColorGreen = a
		end)


		--Whites
		M.Library.Sections.Visual.Sense:AddToggle('Toggle White Crate-Esp', B.Values.Wallhacking.Crates.White_Enabled, nil, function(Boolean)
			B.Values.Wallhacking.Crates.White_Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Filter.SpawnedPiles, {Folder = F_esp.Scraps, Text = "White Crate", DeleteFolder = Scrap_esp.Whites})
		end)

		M.Library.Sections.Visual.Sense:AddColorPallete('Esp Color', B.Values.Wallhacking.Crates.ColorWhite,function(a) 
			B.Values.Wallhacking.Crates.ColorWhite = a
		end)



		--M.Library.Sections.Visual.Sense:AddColorPallete('Esp Color', B.Values.Wallhacking.Crates.ColorGold,function(a) 
		--	B.Values.Wallhacking.Crates.ColorGold = a
		--end)


		--Safes
		M.Library.Sections.Visual.Sense2:AddLabel('\nSafes')

		M.Library.Sections.Visual.Sense2:AddToggle('Toggle Safe-Esp', B.Values.Wallhacking.Safes.Enabled, nil, function(Boolean)
			B.Values.Wallhacking.Safes.Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Map.BredMakurz, {Folder = F_esp.Safes, Text = "Safe", Color = B.Values.Wallhacking.Safes.Color})
		end)

		M.Library.Sections.Visual.Sense2:AddToggle('Registers Check', B.Values.Wallhacking.Safes.Registers, nil, function(Boolean)
			B.Values.Wallhacking.Registers.Enabled = Boolean
		end)

		M.Library.Sections.Visual.Sense2:AddColorPallete('Esp Color', B.Values.Wallhacking.Safes.Color,function(a) 
			B.Values.Wallhacking.Safes.Color = a
		end)


		--ATMs
		M.Library.Sections.Visual.Sense2:AddLabel('\nATMs')

		M.Library.Sections.Visual.Sense2:AddToggle('Toggle ATM-Esp', B.Values.Wallhacking.ATMs.Enabled, nil, function(Boolean)
			B.Values.Wallhacking.ATMs.Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Map.ATMz, {Folder = F_esp.ATMs, Text = "ATM", Color = B.Values.Wallhacking.ATMs.Color})
		end)

		M.Library.Sections.Visual.Sense2:AddColorPallete('Esp Color', B.Values.Wallhacking.ATMs.Color,function(a) 
			B.Values.Wallhacking.ATMs.Color = a
		end)

		--Dealers
		M.Library.Sections.Visual.Sense2:AddLabel('\nDealers')

		M.Library.Sections.Visual.Sense2:AddToggle('Toggle Dealer-Esp', B.Values.Wallhacking.Dealers.Enabled, nil, function(Boolean)
			B.Values.Wallhacking.Dealers.Enabled = Boolean
			B.Scripts.Toggle_ExtraSensoryPerceptionObjects(Boolean, M.Services.Workspace.Map.Shopz, {Folder = F_esp.Dealers, Text = "Dealer", Color = B.Values.Wallhacking.Dealers.Color})
		end)

		M.Library.Sections.Visual.Sense2:AddColorPallete('Esp Color', B.Values.Wallhacking.Dealers.Color,function(a) 
			B.Values.Wallhacking.Dealers.Color = a
		end)


		--end


		--  \\  Menu  //  --
		M.Library.Sections.Misc.Character:AddLabel('\nMenu')	

		M.Library.Sections.Misc.Character:AddKeyBind('Toggle ui', Enum.KeyCode.Insert, function() 
			_G.IsScreenGui_toggler_actor.Enabled = not _G.IsScreenGui_toggler_actor.Enabled
		end)



		--  \\  Aim-Lock  //  --
		pcall(function()
			local Aimlock_temps = {	
				target = nil,
				is_m2_p = false,
			}

			local f_d = {}

			f_d.Target = nil
			f_d.getTarget = function()
				local Distance = B.Values.Aimlock.DistanceValue
				local Part = B.Values.Aimlock.TargetPart
				local Target = nil

				for _, P in M.Services.Players:GetPlayers() do
					if P ~= M.Local.Player then
						if P.Character then
							if P.Character:FindFirstChild("Humanoid") then
								if P.Character:FindFirstChild("HumanoidRootPart") then
									if (M.Functions.GetOwnCharacter().HumanoidRootPart.Position - M.Functions.GetCharacter(P).HumanoidRootPart.Position).Magnitude < B.Values.Aimlock.DistanceValue then
										local doM = function()
											local char = P.Character
											local root, vis = M.Local.Camera:WorldToViewportPoint(char[Part].Position)
											if vis then
												local m = (Vector2.new(M.Local.Mouse.X, M.Local.Mouse.Y) - Vector2.new(root.X, root.Y)).Magnitude
												if m < Distance and m < I_aimlock.Radius then
													Distance = m
													Target = char
												end
											end
										end


										if B.Values.Aimlock.DeadCheck then
											if P.Character.Humanoid.Health > 0 then
												if B.Values.Aimlock.DownedCheck then
													local NewFolder = M.Services.ReplicatedStorage["CharStats"]:FindFirstChild(P.Name) or nil
													if NewFolder then
														if NewFolder.Downed.Value ~= true then
															doM()
														end
													end
												else
													doM()
												end
											end
										else
											doM()
										end
									end
								end
							end
						end
					end
				end
				return Target
			end

			local UIS = game:GetService("UserInputService")
			local TSS = game:GetService("TweenService")

			local RSS = game:GetService("RunService")
			local PSS = game:GetService("Players")

			local chart

			UIS.InputEnded:Connect(function(Input, GameProccess)
				if GameProccess then return end
				if Input.UserInputType == Enum.UserInputType.MouseButton2 then
					Aimlock_temps.is_m2_p = false
				end
			end)

			UIS.InputBegan:Connect(function(Input, GameProccess)
				if GameProccess then return end
				if B.Values.Aimlock.AimlockBool then
					if Input.UserInputType == Enum.UserInputType.MouseButton2 then
						Aimlock_temps.is_m2_p = true
						chart = f_d.getTarget()
					end
				end
			end)

			coroutine.wrap(function()
				while true do RSS.Heartbeat:Wait()
					pcall(function()
						if M.Functions.GetOwnCharacter() then
							if M.Functions.GetOwnCharacter():FindFirstChild("HumanoidRootPart") then
								local gotten_vctr

								if chart then
									gotten_vctr = chart[B.Values.Aimlock.TargetPart].Position


									local tss = TSS:Create(M.Local.Camera, TweenInfo.new(B.Values.Aimlock.TargetSense, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {CFrame = CFrame.lookAt(M.Local.Camera.CFrame.Position, gotten_vctr)})
									if UIS.MouseBehavior == Enum.MouseBehavior.LockCenter and Aimlock_temps.is_m2_p == true then
										tss:Play()
										coroutine.wrap(function()
											task.wait()
											if UIS.MouseBehavior ~= Enum.MouseBehavior.LockCenter or Aimlock_temps.is_m2_p ~= true then
												tss:Pause()
											end
										end)()
									end
								end
							end
						end
					end)
				end
			end)()

			M.Library.Sections.Combat.Aim:AddLabel('Aim Trigger')

			M.Library.Sections.Combat.Aim:AddToggle('Toggle Locking', B.Values.Aimlock.AimlockBool, Enum.KeyCode.L, function(Boolean)
				B.Values.Aimlock.AimlockBool = Boolean
			end)

			M.Library.Sections.Combat.Aim:AddToggle('Dead Check', B.Values.Aimlock.DeadCheck, nil, function(Boolean)
				B.Values.Aimlock.DeadCheck = Boolean
			end)

			M.Library.Sections.Combat.Aim:AddToggle('Downed Check', B.Values.Aimlock.DownedCheck, nil, function(Boolean)
				B.Values.Aimlock.DownedCheck = Boolean
			end)

			M.Library.Sections.Combat.Aim:AddSlider('Locking Sense', 3, 0.075, 0.5, function(Number)
				B.Values.Aimlock.TargetSense = Number
			end)

			M.Library.Sections.Combat.Aim:AddSlider('Locking Distance', 2000, 100, 450, function(Number)
				B.Values.Aimlock.DistanceValue = Number
			end)

			M.Library.Sections.Combat.Aim:AddDropdown('Locking Part',{'Head','Torso','HumanoidRootPart'},'Head',function(a) 
				B.Values.Aimlock.TargetPart = a
			end)
		end)



		coroutine.wrap(function()
			while wait(1) do
				local time = 'TIME '..os.date("%H:%M:%S", os.time())
				local fps = A.fps
				local t = ''			
				t = time.." / "..fps
				B.Assets.Windows.WaterM:ChangeText(t)
			end
		end)()

		B.Assets.Windows.WaterM:Visible(true)
	end)
	
	game.CoreGui:GetAttributeChangedSignal("Celebrial_Destroying"):Once(function()
		if game.CoreGui:GetAttribute("Celebrial_Destroying") == true then
			coroutine.close(Script)
		end
	end)
end
